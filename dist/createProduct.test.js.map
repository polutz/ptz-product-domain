{"version":3,"sources":["../dist-esnext/createProduct.test.js"],"names":["assert","V","Product","validPrice","validName","validCategory","describe","it","product","createProduct","name","price","category","containsFind","errors","e","propName","errorMsg","allErrors","REQUIRED","notContainsFind","MIN","MAX","equal","INVALID_NUMBER_ERROR","throws"],"mappings":"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","file":"createProduct.test.js","sourcesContent":["import * as assert from 'ptz-assert';\nimport * as V from 'ptz-validations';\nimport * as Product from './index';\nconst validPrice = 10;\nconst validName = 'hammer';\nconst validCategory = 'hardware';\ndescribe('createProduct', () => {\n    describe('name', () => {\n        it('Add error when null name', () => {\n            const product = Product.createProduct({ name: null, price: validPrice, category: validCategory });\n            assert.containsFind(product.errors, e => e.propName === 'name'\n                && e.errorMsg === V.allErrors.REQUIRED);\n        });\n        it('Add error when empty name', () => {\n            const product = Product.createProduct({ name: '', price: validPrice, category: validCategory });\n            assert.containsFind(product.errors, e => e.propName === 'name'\n                && e.errorMsg === V.allErrors.REQUIRED);\n        });\n        it('Do not add error when valid name', () => {\n            const product = Product.createProduct({ name: validName, price: validPrice, category: validCategory });\n            assert.notContainsFind(product.errors, e => e.propName === 'name'\n                && e.errorMsg === V.allErrors.REQUIRED);\n        });\n        it('Add error when minLength name', () => {\n            const product = Product.createProduct({ name: 'a', price: validPrice, category: validCategory });\n            assert.containsFind(product.errors, e => e.propName === 'name'\n                && e.errorMsg === V.allErrors.MIN);\n        });\n        it('Add error when maxLength name', () => {\n            const product = Product.createProduct({\n                name: 'labalblhblhbohblabcascjbascijbascjbasclasbclasbash',\n                price: 0, category: ''\n            });\n            assert.containsFind(product.errors, e => e.propName === 'name'\n                && e.errorMsg === V.allErrors.MAX);\n        });\n        it('Should be lowercase', () => {\n            const product = Product.createProduct({ name: 'AnGeLoOcAnA', price: 0, category: validCategory });\n            assert.equal(product.name, 'angeloocana');\n        });\n    });\n    describe('price', () => {\n        it('Add error when null price', () => {\n            const product = Product.createProduct({ name: validName, price: null, category: validCategory });\n            assert.containsFind(product.errors, e => e.propName === 'price'\n                && e.errorMsg === V.allErrors.REQUIRED);\n        });\n        it('Add error when empty price', () => {\n            const product = Product.createProduct({ name: validName, price: '', category: '' });\n            assert.containsFind(product.errors, e => e.propName === 'price'\n                && e.errorMsg === V.allErrors.REQUIRED);\n        });\n        it('Add error when invalid price', () => {\n            const product = Product.createProduct({ name: '', price: 'invalidprice', category: '' });\n            assert.containsFind(product.errors, e => e.propName === 'price'\n                && e.errorMsg === V.allErrors.INVALID_NUMBER_ERROR);\n        });\n        it('Do not add error when valid price', () => {\n            // tslint:disable-next-line:max-line-length\n            const product = Product.createProduct({\n                name: validName, price: 10.99, category: validCategory\n            });\n            assert.notContainsFind(product.errors, e => e.propName === 'price'\n                && e.errorMsg === V.allErrors.REQUIRED);\n            assert.notContainsFind(product.errors, e => e.propName === 'price'\n                && e.errorMsg === V.allErrors.INVALID_NUMBER_ERROR);\n        });\n        it('Should be lowercase', () => {\n            const product = Product.createProduct({\n                name: 'AlAnMaRcElL', price: validPrice, category: validCategory\n            });\n            assert.equal(product.name, 'alanmarcell');\n        });\n    });\n    describe('category', () => {\n        it('Add error when null category', () => {\n            const product = Product.createProduct({ name: validName, price: validPrice, category: null });\n            assert.containsFind(product.errors, e => e.propName === 'category'\n                && e.errorMsg === V.allErrors.REQUIRED);\n        });\n        it('Add error when empty category', () => {\n            const product = Product.createProduct({ name: validName, price: validPrice, category: '' });\n            assert.containsFind(product.errors, e => e.propName === 'category'\n                && e.errorMsg === V.allErrors.REQUIRED);\n        });\n        it('Do not add error when valid category', () => {\n            const product = Product.createProduct({ name: validName, price: validPrice, category: validCategory });\n            assert.notContainsFind(product.errors, e => e.propName === 'category'\n                && e.errorMsg === V.allErrors.REQUIRED);\n        });\n        it('Add error when minLength category', () => {\n            const product = Product.createProduct({ name: validName, price: validPrice, category: 'a' });\n            assert.containsFind(product.errors, e => e.propName === 'category'\n                && e.errorMsg === V.allErrors.MIN);\n        });\n        it('Add error when maxLength category', () => {\n            const product = Product.createProduct({\n                name: '',\n                price: 0,\n                category: 'labalblhblhbohblabcascjbascijbascjbasclasbclasbash'\n            });\n            assert.containsFind(product.errors, e => e.propName === 'category'\n                && e.errorMsg === V.allErrors.MAX);\n        });\n        it('Should be lowercase', () => {\n            const product = Product.createProduct({ name: validName, price: 0, category: 'AnGeLoOcAnA' });\n            assert.equal(product.category, 'angeloocana');\n        });\n    });\n    it('throw error when null args', () => {\n        assert.throws(() => Product.createProduct(null));\n    });\n});\n//# sourceMappingURL=createProduct.test.js.map"]}